services:

  adaptercms:
    build: # The word 'build' indicates that this service will be built from a Dockerfile.
      # The 'context' specifies the build context, which is the directory containing the Dockerfile
      context: . # This is the current directory where the docker-compose.yml file is located.
      dockerfile: docker/adaptercms/Dockerfile
      # args:
      #   - UID=${UID:-1026}
      #   - GID=${GID:-100}
    ports: 
      # - "9090:80" #uncomment when using portainer
      - "8080:80"
    volumes:
      # The following volumes are mounted to the container.
      - .:/var/www/html/ # This mounts the current directory to /var/www/html in the container.
      # This allows you to edit the code on your host machine and see the changes in the container.
      # The second volume mounts the local configuration file to the container.
      # This allows you to customize the configuration without modifying the container image.
      - ./docker/adaptercms/config/app/cms_app_local.php:/var/www/html/config/app_local.php
      # The third volume mounts the local logs directory to the container.
      # This allows you to view the logs generated by the application.
      # The logs are stored in the /var/log/nginx directory in the container.
      - ./logs/nginx:/var/log/nginx/
    environment:
      - REDIS_USERNAME=root
      - REDIS_PASSWORD=root
      - APP_NAME=AdapterCMS
      - DEBUG=true
      - APP_ENCODING=UTF-8
      - APP_DEFAULT_LOCALE=en_GB
      - APP_DEFAULT_TIMEZONE=America/Chicago
      - SECURITY_SALT=developmentsalt # This is a security salt used for hashing and encryption.
      - DB_HOST=mysql
      - DB_USERNAME=adaptercms_user
      - DB_PASSWORD=password
      - DB_DATABASE=adaptercms
      - DB_PORT=3306
      - TEST_DB_HOST=mysql
      - TEST_DB_USERNAME=adaptercms_user_test
      - TEST_DB_PASSWORD=password
      - TEST_DB_DATABASE=adaptercms_test
      - TEST_DB_PORT=3306

  mysql:
    image: mysql:8.4.3
    # The MySQL service uses the official MySQL image from Docker Hub.
    # It runs MySQL on port 3310 and persists data in a volume.
    # The database is accessible at http://localhost:3310
    # You can connect to it using a MySQL client or from your application.
    # The service is named "mysql" and is linked to the "adaptercms" service.
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: adaptercms
      MYSQL_USER: adaptercms_user
      MYSQL_PASSWORD: password
    ports:
      # - "9910:3306" # Uncomment this line if you want to expose MySQL on port 9910 with portainer.
      - "3310:3306"
    volumes:
      - mysql_data:/var/lib/mysql # This volume is used to persist MySQL data.
      # The MySQL data is stored in a volume named "mysql_data".
      # This allows you to keep your data even if the container is removed or recreated.
      # The volume is mounted to /var/lib/mysql in the container.
      # This is the default location where MySQL stores its data files.


      # The following volume mounts the local SQL initialization script to the container.
      # This script is executed when the container is started for the first time.
      # It creates the initial database and tables.
      # You can modify this script to customize the initial database setup.
      # The script is located at ./docker/mysql/init.sql and is mounted to /docker-entrypoint-initdb.d/init.sql in the container.
      # This allows you to initialize the database with custom data or schema.
      # The MySQL container will execute this script automatically when it starts.
      # If you want to run custom SQL commands, you can modify this script.
      # For example, you can create tables, insert data, or run migrations.
      # The MySQL container will execute this script automatically when it starts.
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql

  # The following service is for RabbitMQ, a message broker that allows applications to communicate with each other.
  # It is used for asynchronous processing and message queuing.
  # The RabbitMQ service uses the official RabbitMQ image with the management plugin.
  # It runs RabbitMQ on port 5672 and exposes the management UI on port 15672.
  # The service is named "rabbitmq" and is linked to the "adaptercms" service.
  # You can access the RabbitMQ management UI at http://localhost:15672
  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # This volume is used to persist RabbitMQ data.
      # The RabbitMQ data is stored in a volume named "rabbitmq_data".
    environment:
      - RABBITMQ_DEFAULT_USER=guest # Default username for RabbitMQ
      - RABBITMQ_DEFAULT_PASS=guest # Default password for RabbitMQ

  # The following service is for phpMyAdmin, a web-based MySQL administration tool.
 
  # It is used for continuous integration and continuous deployment (CI/CD).


  phpmyadmin:
    image: phpmyadmin
    ports:
      # - 9092:80 ``# Uncomment this line if you want to expose phpMyAdmin on port 9092 with portainer.
      - 8082:80
    environment:
      PMA_HOST: mysql # The MySQL host is set to the "mysql" service.
      PMA_USER: root # The MySQL user is set to "root".
      PMA_PASSWORD: password # The MySQL password is set to "password".
    depends_on:
      - mysql # The phpMyAdmin service depends on the "mysql" service.
  # The Jenkins service is built from a Dockerfile located at docker/jenkins/Dockerfile.
  # It runs Jenkins on port 8081 and exposes the Jenkins web interface.

  # The service is named "jenkins" and is linked to the "adaptercms" service.
  # You can access the Jenkins web interface at http://localhost:8081
  jenkins:
    build:
      context: .
      dockerfile: docker/jenkins/Dockerfile
    privileged: true
    user: root
    ports:
      # - "9091:8080" # Uncomment this line if you want to expose Jenkins on port 9091 with portainer.
      - "8081:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home # This volume is used to persist Jenkins data.
      - /var/run/docker.sock:/var/run/docker.sock # This mounts the Docker socket to the container, allowing Jenkins to run Docker commands.
      # The following volume mounts the local Jenkins configuration file to the container.
      # This allows you to customize the Jenkins configuration without modifying the container image.
      # The configuration file is located at ./docker/jenkins/jenkins.yaml and is mounted to /var/jenkins_home/jenkins.yaml in the container.
      # This allows
      - ./docker/jenkins/jenkins.yaml:/var/jenkins_home/jenkins.yaml # This mounts the Jenkins configuration file to the container.
    # The Jenkins service is configured to run without the setup wizard.
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false # This disables the Jenkins setup wizard, allowing you to configure Jenkins directly.

  # The following service is for Mailpit, a simple email testing tool.
  # It is used to capture and view emails sent by the application.
  mailpit:
    image: axllent/mailpit:latest
    ports:
      - "1125:1025"
      - "8025:8025"
    volumes:
      - mailpit_data:/data # This volume is used to persist Mailpit data.
    environment:
      - MP_MAX_MESSAGES=5000
      - MP_DATABASE=/data/mailpit.db
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOST=adaptercms
      - REDIS_PORT=6379
      - REDIS_PASSWORD=root
      - HTTP_USER=root
      - HTTP_PASSWORD=root
    ports:
      - "8084:8081"
    depends_on:
      - adaptercms
  redis:
    image: redis:latest
    ports:
      - "6379:6379" 


# Volumes for persistent storage with local paths
volumes:
  rabbitmq_data: # This volume is used to persist RabbitMQ data.
  jenkins_home: # This volume is used to persist Jenkins data.
  mailpit_data: # This volume is used to persist Mailpit data.
  # Uncomment the following line if you want to use a named volume for MySQL data.
  # This allows you to keep your MySQL data even if the container is removed or recreated.
  # mysql_data: # This volume is used to persist MySQL data.
  # Uncomment the following line if you want to use a named volume for MySQL data.
  # This allows you to keep your MySQL data even if the container is removed or recreated
  mysql_data: # This volume

# Uncomment the following volumes section if you want to use named volumes for persistent storage with Portainer.
# volumes:
#   mysql_data:
#     driver: local
#     driver_opts:
#       device: /volume1/docker/adaptercms/mysql_data
#       o: bind
#   rabbitmq_data:
#     driver: local
#     driver_opts:
#       device: /volume1/docker/adaptercms/rabbitmq_data
#       o: bind
#   mailpit_data:
#     driver: local
#     driver_opts:
#       device: /volume1/docker/adaptercms/mailpit_data
#       o: bind
#   jenkins_home:
#     driver: local
#     driver_opts:
#       device: /volume1/docker/adaptercms/jenkins_home
#       o: bind
