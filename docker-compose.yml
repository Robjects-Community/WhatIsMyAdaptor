version: '3.8'
# This docker-compose file is used to set up a CakePHP 5 application with a backend service, PostgreSQL database, Redis cache, Adminer for database management, and Jupyter Notebook for data science tasks.
# It includes health checks for the backend and database services, and sets resource limits for each service to ensure efficient resource usage.
# The services are configured to run with specific user permissions and security options to enhance security.
# The frontend service runs a CakePHP 5 application, while the backend service runs a Node.js application.
# The database service uses PostgreSQL, and Redis is used for caching.
services:
# Frontend service for CakePHP 5 application
# This service runs a CakePHP 5 application and is configured to use specific ports, environment variables, and volumes for persistent storage. 
  cakephp5:
    image: shinsenter/cakephp5
    container_name: WebAdaptors-CakePHP5
    environment:
      - TZ=America/Chicago
    ports:
      - 8323:80
      - 3888:3000
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/3000' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    volumes:
      - /volume1/docker/webadapters/cakephp:/app/data:rw
    restart: unless-stopped
    depends_on:
      - db_postgresql
      - db_mariadb
      - redis
      - adminer

      # Database service using PostgreSQL
      # This service runs a PostgreSQL database and is configured to use specific environment variables, volumes for persistent storage, and health checks to ensure the database is ready before other services depend on it.

  db_mariadb:
    image: mariadb:11.4-noble #LTS Long Time Support Until May 29, 2029.
    container_name: WebAdaptors-DB
    user: 1026:100
    hostname: webadapters-db
    environment:
      MYSQL_DATABASE: webadapters_db
      MYSQL_USER: robjects
      MYSQL_PASSWORD: assHIgai1!?
      MYSQL_ROOT_PASSWORD: rootpass
      TZ: America/Chicago
    volumes:
      - /volume1/docker/webadapters/db_mariadb:/var/lib/mysql:rw
    restart: on-failure:5
  db_postgresql:
    container_name: WebAdaptors-PostgreSQL
    image: postgres
    mem_limit: 256m
    cpu_shares: 768
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "marius_DB", "-U", "root"]
    environment:
      POSTGRES_USER: robjects
      POSTGRES_PASSWORD: assHIgai1!?
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      TZ: America/Chicago
      POSTGRES_INITDB_WALDIR: /var/lib/postgresql/wal
      POSTGRES_INITDB_XLOGDIR: /var/lib/postgresql/xlog
      POSTGRES_INITDB_DATADIR: /var/lib/postgresql/data
      POSTGRES_INITDB_LOGDIR: /var/lib/postgresql/log
      POSTGRES_INITDB_BACKUPDIR: /var/lib/postgresql/backup
      POSTGRES_INITDB_TMPDIR: /var/lib/postgresql/tmp
      POSTGRES_INITDB_SCRATCHDIR: /var/lib/postgresql/scratch
      POSTGRES_INITDB_CONFIGURE: "--auth-host=md5 --auth-local=trust"
      POSTGRES_INITDB_LOCALE: "en_US.UTF-8"
      POSTGRES_INITDB_ENCODING: "UTF8"
      POSTGRES_DB: webadapters_db
    volumes:
      - /volume1/docker/webadapters/db_postgresql:/var/lib/postgresql/data:rw
    ports:
      - 2665:5432
    restart: on-failure:5
    
# Adminer service for database management
  # This service provides a web interface for managing the database and is configured to use specific ports and security options.
  # adminer:
  #   image: adminer:latest
  #   container_name: WebAdaptors-Adminer
  #   hostname: adminer
  #   mem_limit: 128m
  #   cpu_shares: 256
  #   security_opt:
  #     - no-new-privileges:true
  #   user: 1026:100
  #   ports:
  #     - 8220:8080
  #   restart: on-failure:5
  #   volumes:
  #     - /volume1/docker/webadapters/adminer:/var/www/html:rw
  #   depends_on:
  #     - db_mariadb
  #     - db_postgresql
  #     - redis
  #   environment:
  #     - ADMINER_DEFAULT_SERVER=db_mariadb
  #     - ADMINER_DEFAULT_SERVER_POSTGRES=db_postgresql
  #     - ADMINER_DEFAULT_SERVER_REDIS=redis
  #     - ADMINER_DEFAULT_SERVER_JUPYTER=jupyter
  #     - ADMINER_DEFAULT_SERVER_BACKEND=backend
  #     - ADMINER_DEFAULT_SERVER_FRONTEND=frontend
  #     - ADMINER_DEFAULT_SERVER_ADMINER=adminer
  #     - ADMINER_DEFAULT_DB=webadapters_db
  #     - ADMINER_DEFAULT_USER=robjects
  #     - ADMINER_DEFAULT_PASSWORD=assHIgai1!?
  #     - TZ=America/Chicago
  #   # Healthcheck to ensure the Adminer service is running
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 90s

  adminer:
    image: adminer:latest
    container_name: WebAdaptors-Adminer
    hostname: adminer:latest
    security_opt:
      - no-new-privileges:true
    user: 1026:100
    ports:
      - 8443:8080
    restart: on-failure:5
    depends_on:
      - db_postgresql
      - db_mariadb
      - redis
    environment:
      - ADMINER_DEFAULT_SERVER=db_postgresql
      - ADMINER_DEFAULT_SERVER_POSTGRES=db_postgresql
      - ADMINER_DEFAULT_SERVER_REDIS=redis

# This docker-compose file is used to set up a CakePHP 5 application with a backend service, PostgreSQL database, Redis 
  
# redis service for caching
# This service is used by the backend to cache data and improve performance. It is configured to use specific environment variables, volumes for persistent storage, and health checks to ensure the Redis service is running properly.
  redis:
    image: redis
    hostname: WebAdaptors-redis
    container_name: WebAdaptors-REDIS
    user: 1026:100
    healthcheck:
     test: ["CMD-SHELL", "redis-cli ping || exit 1"]
    volumes:
      - /volume1/docker/webadapters/redis:/data:rw
    environment:
      TZ: America/Chicago

  # jupyter:
  #   container_name: WebAdaptors-Jupyter
  #   image: jupyter/datascience-notebook:latest
  #   mem_limit: 3g
  #   cpu_shares: 768
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - /volume1/docker/webadapters/jupyter:/home/jovyan/work:rw
  #   ports:
  #     - 10445:8888
  #   depends_on:
  #     - db
  #   environment:
  #     - JUPYTER_ENABLE_LAB=yes
  #     - JUPYTER_TOKEN=webadapters
  #     - TZ=America/Chicago
  #   restart: on-failure:5

# Backend service for CakePHP 5 application
# This service runs a Node.js application and is configured to use specific ports, environment variables,
# and volumes for persistent storage. It also includes health checks to ensure the backend service is running
# # properly before the frontend service starts.
#   backend:
#     image: shinsenter/cakephp5-backend
#     container_name: WebAdaptors-Backend
#     environment:
#       - TZ=America/Chicago
#     ports:
#       - 8320:80
#       - 3889:3000
#     healthcheck:
#       test: timeout 10s bash -c ':> /dev/tcp/127.0.1/3000' || exit 1
#       interval: 10s
#       timeout: 5s
#       retries: 3
#       start_period: 90s
#     volumes:
#       - /volume1/docker/webadapters/backend:/app/data:rw
#     restart: unless-stopped


# Volumes for persistent storage
volumes:
  db_postgresql:
    driver: local
    driver_opts:
      device: /volume1/docker/webadapters/db_postgresql
      o: bind
  db_mariadb:
    driver: local
    driver_opts:
      device: /volume1/docker/webadapters/db_mariadb
      o: bind
  cakephp_data:
    driver: local
    driver_opts:
      device: /volume1/docker/webadapters/cakephp
      o: bind
  redis_data:
    driver: local
    driver_opts:
      device: /volume1/docker/webadapters/redis
      o: bind
  adminer_data:
    driver: local
    driver_opts:
      device: /volume1/docker/webadapters/adminer
      o: bind
  backend_data:
    driver: local
    driver_opts:  
      device: /volume1/docker/webadapters/backend
      o: bind
  jupyter_data:
    driver: local
    driver_opts:
      device: /volume1/docker/webadapters/jupyter
      o: bind
